AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS Cloudformation Projet 10 OCR

# La creation du VPC
Parameters:
  VpcCidrBlock:
    Type: String
    Default: 10.0.0.0/16
    Description: The main VPC CIDR Block
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock:  !Ref VpcCidrBlock
      Tags:
        - Key: Name
          Value: 'SuperGeek'
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-1a
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt VPC.CidrBlock, 1, 8 ]]
      Tags:
        - Key: Name
          Value: 'SuperGeek-private-a'
      VpcId: !Ref VPC
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-1b
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt VPC.CidrBlock, 2, 8 ]]
      Tags:
        - Key: Name
          Value: 'SuperGeek-private-b'
      VpcId: !Ref VPC
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-1a
      CidrBlock: !Select [ 100, !Cidr [ !GetAtt VPC.CidrBlock, 101, 8 ]]
      Tags:
        - Key: Name
          Value: 'SuperGeek-public-a'
      VpcId: !Ref VPC
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-1b
      CidrBlock: !Select [ 101, !Cidr [ !GetAtt VPC.CidrBlock, 102, 8 ]]
      Tags:
        - Key: Name
          Value: 'SuperGeek-public-b'
      VpcId: !Ref VPC


# The Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: 'SuperGeek-InternetGateway'
  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  NatEipA:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatEipB:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatGatewayA:
    DependsOn: AttachInternetGateway
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEipA.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: Name
          Value: SuperGeek-nat-a
  NatGatewayB:
    DependsOn: AttachInternetGateway
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEipB.AllocationId
      SubnetId: !Ref PublicSubnetB
      Tags:
        - Key: Name
          Value: SuperGeek-nat-b

# Route table
  PublicRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: SuperGeek-route-public-a
  PublicRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: SuperGeek-route-public-b
  
  AttachPublicRouteTableA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableA
      SubnetId: !Ref PublicSubnetA

  AttachPublicRouteTableB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableB
      SubnetId: !Ref PublicSubnetB

  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: SuperGeek-private-a

  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: SuperGeek-private-b

  AttachPrivateRouteTableA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:      
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref PrivateSubnetA

  AttachPrivateRouteTableB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:      
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref PrivateSubnetB
  
  PublicRouteA:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTableA

  PublicRouteB:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTableB

  PrivateRouteA:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA
      RouteTableId: !Ref PrivateRouteTableA

  PrivateRouteB:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayB
      RouteTableId: !Ref PrivateRouteTableB

# Security Group

  SuperGeekEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SuperGeek EC2 security group
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 2375
          ToPort: 2375
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

# RDS Database  
  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: wordpress
      Engine: MySQL
      MasterUsername: admin
      DBInstanceClass: db.t2.micro
      AllocatedStorage: 5
      MasterUserPassword: DBPassword 
      DBSubnetGroupName: !Ref DBSubnetGroup

  DBSecurityGroup:
    Type: AWS::RDS::DBSecurityGroup
    DependsOn: DBInstance 
    Properties:
      GroupDescription: Security Group for RDS public access
      DBSecurityGroupIngress:
        - CIDRIP: 10.0.0.0/16
      EC2VpcId:
        Ref: VPC

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: DB-Subnet
      DBSubnetGroupName: DB-Subnet
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB

    #Launch Config docker wordpress 
    
  SuperGeeklaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      ImageId: ami-0ea3405d2d2522162
      InstanceType: t2.micro
      KeyName: Goku
      SecurityGroups:
        - !Ref SuperGeekEC2SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install -y https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm
          sudo yum install -y mysql-community-client
          sudo amazon-linux-extras install docker -y
          sudo service docker start
          sudo systemctl enable --now docker
          sudo usermod -a -G docker ec2-user
          sudo docker run -d --name wordpress -e WORDPRESS_DB_HOST=dbinstance.eu-west.rds.amazonaws.com -e WORDPRESS_DB_USER=admin -e WORDPRESS_DB_PASSWORD=DBPassword -e WORDPRESS_DB_NAME=wordpress -p 80:80 -d wordpress
          curl http://localhost/
          

  # Scaling Group
  SuperGeekScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref SuperGeeklaunchConfig
      AvailabilityZones:
        - Fn::Select:
          - 0
          - Fn::GetAZs: !Ref AWS::Region
        - Fn::Select:
          - 1
          - Fn::GetAZs: !Ref AWS::Region
      VPCZoneIdentifier:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      DesiredCapacity: 2
      MaxSize: 6
      MinSize: 2
      TargetGroupARNs:
        - !Ref SuperGeekTargetGroup
    DependsOn:
      - InternetGateway
    
 # Target Group     
  SuperGeekTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Port: 22
      Port : 2375
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

# Load Balancer
  SuperGeekLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !Ref SuperGeekLoadBalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      
      

# Load Balancer Security Group
  SuperGeekLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SuperGeek EC2 security group 
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 2375
          ToPort: 2375
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

# Load Balancer Listener

  SuperGeekLoadBlancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref SuperGeekLoadBalancer
      Port: 80
      Port: 22
      Port: 2375
      Protocol: HTTP
      DefaultActions:
         - Type: forward
           TargetGroupArn: !Ref SuperGeekTargetGroup

      
# Email notification using SNS
  MySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
     Subscription:
       -  Endpoint: alainsingaye@gmail.com
          Protocol: email
  
# Scaleup POlicy in case the CPU goes over 80%
  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: SuperGeekScalingGroup
      Cooldown: '1'
      ScalingAdjustment: '1'
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '80'
      AlarmDescription: Alarm if CPU too high or metric disappears indicating instance
        is down
      Period: '300'
      AlarmActions:
      - Ref: ScaleUpPolicy
      - Ref: "MySNSTopic"
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: SuperGeekScalingGroup
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization
      



  